#!/usr/bin/env bash

ScriptDirectory=$HOME/Scripts
ScreenshotDirectory=$HOME/Pictures/Screenshots

# set ffmpeg defaults
ffmpeg() {
    command ffmpeg -hide_banner -loglevel error -nostdin "$@"
}

countdown() {
  notify-send --app-name="screenshot" "Screenshot" "Recording in 3" -t 1000
  sleep 1
  notify-send --app-name="screenshot" "Screenshot" "Recording in 2" -t 1000
  sleep 1
  notify-send --app-name="screenshot" "Screenshot" "Recording in 1" -t 1000
  sleep 1
}

screenshot_region_clipboard() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to capture"
  eval "$ScriptDirectory/screenshot -o '-s'"
  notify-send --app-name="screenshot" "Screenshot" "Region copied to Clipboard"
}

screenshot_region_file() {
  notify-send --app-name="screenshot" "Screenshot" "Select a region to capture"
  eval "$ScriptDirectory/screenshot -o '-s' $ScreenshotDirectory"
  notify-send --app-name="screenshot" "Screenshot" "Region saved to ${ScreenshotDirectory//${HOME}/~}"
}

screenshot_clipboard() {
  eval "$ScriptDirectory/screenshot" 
  notify-send --app-name="screenshot" "Screenshot" "Screenshot copied to Clipboard"
}

screenshot_file() {
  "$ScriptDirectory/screenshot $ScreenshotDirectory"
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${ScreenshotDirectory//${HOME}/~}"
}

# record_region() {
#   # notify-send --app-name="screenshot" "Screenshot" "Select a region to record"
#   # time=$(date '+%d-%m-%Y %H:%M:%S')
#   # "ffmpeg -f x11grab -i :0.0 $screenshot_directory/$time.mp4"
#   # notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}"
# }

record_screen() {
  countdown
  time=$(date '+%d-%m-%Y %H:%M:%S')
  eval "ffmpeg -f x11grab -i :0.0 '$ScreenshotDirectory/$time.mp4'"
  notify-send --app-name="screenshot" "Screenshot" "Saved to ${screenshot_directory//${HOME}/~}"
}

get_options() {
  echo -e "  Region  Clip"
  echo -e "  Region  File"
  echo -e "  Screen  Clip"
  echo -e "  Screen  File"
  # echo -e "  Region  File (MP4)"
  # echo -e "  Screen  File (MP4)"
}

check_deps() {
  if ! hash "$1" 2>/dev/null; then
    echo "Error: This script requires $1"
    exit 1
  fi
}

main() {
  # check dependencies
  check_deps slop
  check_deps ffmpeg
  check_deps xclip
  check_deps rofi

  if [[ $1 == '--help' ]] || [[ $1 = '-h' ]]
  then
    echo ### rofi-screenshot
    echo "USAGE: rofi-screenshot [OPTION]"
    echo "(no option)"
    echo "    show the screenshot menu"
    echo "-s, --stop"
    echo "    stop recording"
    echo "-h, --help"
    echo "    this screen"
    exit 1
  fi

  if [[ $1 = '--stop' ]] || [[ $1 = '-s' ]]
  then
    pkill -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*'
    exit 1
  fi

  # Get choice from rofi
  choice=$( (get_options) | rofi -dmenu -i -fuzzy -p "Screenshot" )

  # If user has not picked anything, exit
  if [[ -z "${choice// }" ]]; then
      exit 1
  fi

  # run the selected command
  case $choice in
    '  Region  Clip')
      screenshot_region_clipboard
      ;;
    '  Region  File')
      screenshot_region_file
      ;;
    '  Screen  Clip')
      screenshot_clipboard
      ;;
    '  Screen  File')
      screenshot_file
      ;;
    # '  Region  File (MP4)')
    #   record_region
    #   ;;
    # '  Screen  File (MP4)')
    #   record_screen
    #   ;;
  esac

  # done
  set -e
}

main $1 &

exit 0

! /bin/bash
